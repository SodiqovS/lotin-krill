{"version":3,"file":"index.js","sources":["../dist-src/characters.js","../dist-src/utils.js","../dist-src/cyrillic.js","../dist-src/exceptionalsCollection.js","../dist-src/latin.js","../dist-src/index.js"],"sourcesContent":["export const APOSTROPHE = '\\u02bc';\nexport const TURNED_COMMA = '\\u2018';\nexport const LATIN_CHARACTERS = {\n  ['A']: 'А',\n  ['a']: 'а',\n  ['B']: 'Б',\n  ['b']: 'б',\n  ['D']: 'Д',\n  ['d']: 'д',\n  ['E']: 'Е',\n  ['e']: 'е',\n  ['F']: 'Ф',\n  ['f']: 'ф',\n  ['G']: 'Г',\n  ['g']: 'г',\n  ['H']: 'Ҳ',\n  ['h']: 'ҳ',\n  ['I']: 'И',\n  ['i']: 'и',\n  ['J']: 'Ж',\n  ['j']: 'ж',\n  ['K']: 'К',\n  ['k']: 'к',\n  ['L']: 'Л',\n  ['l']: 'л',\n  ['M']: 'М',\n  ['m']: 'м',\n  ['N']: 'Н',\n  ['n']: 'н',\n  ['O']: 'О',\n  ['o']: 'о',\n  ['P']: 'П',\n  ['p']: 'п',\n  ['Q']: 'Қ',\n  ['q']: 'қ',\n  ['R']: 'Р',\n  ['r']: 'р',\n  ['S']: 'С',\n  ['s']: 'с',\n  ['T']: 'Т',\n  ['t']: 'т',\n  ['U']: 'У',\n  ['u']: 'у',\n  ['V']: 'В',\n  ['v']: 'в',\n  ['X']: 'Х',\n  ['x']: 'х',\n  ['Y']: 'Й',\n  ['y']: 'й',\n  ['Z']: 'З',\n  ['z']: 'з'\n};\nexport const CYRILLIC_CHARACTERS = {\n  ['А']: 'A',\n  ['а']: 'a',\n  ['Б']: 'B',\n  ['б']: 'b',\n  ['Д']: 'D',\n  ['д']: 'd',\n  ['Е']: 'E',\n  ['е']: 'e',\n  ['Ф']: 'F',\n  ['ф']: 'f',\n  ['Г']: 'G',\n  ['г']: 'g',\n  ['Ҳ']: 'H',\n  ['ҳ']: 'h',\n  ['И']: 'I',\n  ['и']: 'i',\n  ['Ж']: 'J',\n  ['ж']: 'j',\n  ['К']: 'K',\n  ['к']: 'k',\n  ['Л']: 'L',\n  ['л']: 'l',\n  ['М']: 'M',\n  ['м']: 'm',\n  ['Н']: 'N',\n  ['н']: 'n',\n  ['О']: 'O',\n  ['о']: 'o',\n  ['П']: 'P',\n  ['п']: 'p',\n  ['Қ']: 'Q',\n  ['қ']: 'q',\n  ['Р']: 'R',\n  ['р']: 'r',\n  ['С']: 'S',\n  ['с']: 's',\n  ['Т']: 'T',\n  ['т']: 't',\n  ['У']: 'U',\n  ['у']: 'u',\n  ['В']: 'V',\n  ['в']: 'v',\n  ['Х']: 'X',\n  ['х']: 'x',\n  ['Й']: 'Y',\n  ['й']: 'y',\n  ['З']: 'Z',\n  ['з']: 'z',\n  ['Ў']: `O${TURNED_COMMA}`,\n  ['ў']: `o${TURNED_COMMA}`,\n  ['Ғ']: `G${TURNED_COMMA}`,\n  ['ғ']: `g${TURNED_COMMA}`,\n  ['Ш']: 'Sh',\n  ['ш']: 'sh',\n  ['Ч']: 'Ch',\n  ['ч']: 'ch',\n  ['Ё']: 'Yo',\n  ['ё']: 'yo',\n  ['Ц']: 'S',\n  ['ц']: 's',\n  ['Ь']: '',\n  ['ь']: '',\n  ['Э']: 'E',\n  ['э']: 'e',\n  ['Ю']: 'Yu',\n  ['ю']: 'yu',\n  ['Я']: 'Ya',\n  ['я']: 'ya',\n  ['Ъ']: APOSTROPHE,\n  ['ъ']: APOSTROPHE\n};\nexport const CYRILLIC_LETTER = `\\u0400-\\u04FF`;\nexport const CYRILLIC_VOVEL = `аоэеиуўёюя`;\nexport const LATIN_LETTER = `a-z`;\nexport const LATIN_VOVEL = `aeiou`;","import anchorme from 'anchorme';\nexport function isLowerCase(char) {\n  return char.toLowerCase() === char;\n}\nexport function normalizeCase(char, assimilateTo) {\n  return isLowerCase(assimilateTo) ? char.toLowerCase() : char.toUpperCase();\n}\nexport function capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();\n} // Detect only alphabetical letters, excluding apostrophe(')\n\nexport function isLetter(char) {\n  if (typeof char === 'string') {\n    return /^[a-z\\u0400-\\u04FF]+$/i.test(char);\n  }\n\n  return false;\n}\nexport function isVovel(char) {\n  return /[аоэеиуўёюяaeiou]/i.test(char);\n}\nexport function isURL(word) {\n  return anchorme.list(word).length > 0;\n}\nexport function escapeRegex(expString) {\n  return expString.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\nexport function endsWithSoftSign(word) {\n  return /ь$/i.test(word);\n}\nexport function isRomanNumber(word) {\n  return /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})(\\.|\\))?$/.test(word);\n}","import { CYRILLIC_CHARACTERS } from \"./characters.js\";\nimport { capitalize, isLetter, isLowerCase, normalizeCase } from \"./utils.js\";\n\nfunction normalizeBigramCasing(word, matcher, latinBigram) {\n  return word.replace(matcher, (matchString, index) => {\n    if (isLowerCase(matchString)) {\n      return latinBigram.toLowerCase();\n    }\n\n    if (!isLetter(word[index - 1]) && !isLetter(word[index + 1])) {\n      return capitalize(latinBigram);\n    } // Assimilate to the next letter\n\n\n    const assimilator = isLetter(word[index + 1]) && word[index + 1];\n\n    if (assimilator) {\n      return isLowerCase(assimilator) ? capitalize(latinBigram) : latinBigram.toUpperCase();\n    }\n\n    return latinBigram.toUpperCase();\n  });\n}\n\nfunction replaceSpecials(word) {\n  word = normalizeBigramCasing(word, /Ч/gi, 'CH');\n  word = normalizeBigramCasing(word, /Ш/gi, 'SH');\n  word = normalizeBigramCasing(word, /^Е/gi, 'YE');\n  word = normalizeBigramCasing(word, /Ё/gi, 'YO');\n  word = normalizeBigramCasing(word, /Ю/gi, 'YU');\n  word = normalizeBigramCasing(word, /Я/gi, 'YA'); // Don't split into bigram if repetitive sequence of `e`s is 3+\n\n  word = word.replace(/е{3,}/gi, matchString => matchString.replace(/е/gi, str => CYRILLIC_CHARACTERS[str] || str));\n  return word.replace(/[ьъ]е/gi, str => normalizeCase('ye', str.charAt(1))).replace(/[аоэеиуўёюяaeiou]е/gi, str => str.charAt(0) + normalizeCase('ye', str.charAt(1))).replace(/ьо/gi, matchString => normalizeCase('yo', matchString.charAt(1))).replace(/[ўғ]ъ/gi, matchString => matchString.charAt(0)).replace(/[аоэеиуўёюяaeiou]ц/gi, str => str.charAt(0) + normalizeCase('ts', str.charAt(1)));\n}\n\nexport function cyrillicToLatin(word) {\n  const escapedWord = replaceSpecials(word);\n  let out = '';\n\n  for (const char of escapedWord) {\n    if (char in CYRILLIC_CHARACTERS) {\n      out += CYRILLIC_CHARACTERS[char];\n    } else {\n      out += char;\n    }\n  }\n\n  return out;\n}","import { capitalize, endsWithSoftSign, escapeRegex, isLowerCase } from \"./utils.js\";\n/*\n  Exceptional word pairs works bidirectional even if\n  transliteration from cyrillic to latin is usually\n  possible without exceptions list. Sepatating list \n  into 2 (one for latin, the other for cyrillc) make\n  things complicated. \n  \n  Proposal can be introducing optional 3rd item to \n  `ExceptionalWordPair` which will indicate \n  bidirectional, only `latin->cyrillic` or only \n  `cyrillic->latin` transliteration. This way look-ups \n  in exceptionals list can be avoided where unecessary.\n*/\n\nexport class ExceptionalsCollection {\n  collection = [];\n\n  constructor(exceptions = []) {\n    this.extend(exceptions);\n  }\n\n  extend(exceptions) {\n    // TODO: Optimize for duplicates\n    exceptions.forEach(pair => {\n      if (pair && pair[0] && pair[1]) {\n        this.collection.push(...this.generateWordCasingVariants(pair));\n      }\n    });\n  }\n\n  purge() {\n    this.collection = [];\n  }\n\n  generateWordCasingVariants([latin, cyrillic]) {\n    return [[latin.toLowerCase(), cyrillic.toLowerCase()], [latin.toUpperCase(), cyrillic.toUpperCase()], [capitalize(latin), capitalize(cyrillic)]];\n  }\n\n  getCase(exceptionalPair, source) {\n    const exceptionSource = source === 'latin' ? 0 : 1;\n    const exceptionTarget = source === 'latin' ? 1 : 0;\n    return {\n      exceptionalWord: exceptionalPair[exceptionSource],\n      replacement: exceptionalPair[exceptionTarget]\n    };\n  }\n\n  normalizeEndSoftSign(exceptional) {\n    const {\n      replacement\n    } = exceptional;\n    exceptional.replacement = replacement.substring(0, replacement.length - 1);\n  }\n\n  findInCollection(word, source) {\n    let exceptional;\n    let alternative; // If the word is typed with wrong letter-casing, default to lower-case or capitalize\n\n    const shouldDefaultToLowerCase = isLowerCase(word.charAt(0));\n    const altCasingMatch = shouldDefaultToLowerCase ? word.toLowerCase() : capitalize(word);\n\n    for (const exceptionalPair of this.collection) {\n      const {\n        exceptionalWord,\n        replacement\n      } = this.getCase(exceptionalPair, source);\n\n      if (word.startsWith(exceptionalWord)) {\n        exceptional = {\n          exceptionalWord,\n          replacement\n        };\n\n        if (source === 'latin' && endsWithSoftSign(replacement) && word.length !== exceptionalWord.length) {\n          this.normalizeEndSoftSign(exceptional);\n        }\n\n        return {\n          exceptional\n        };\n      }\n\n      if (altCasingMatch.startsWith(exceptionalWord)) {\n        alternative = {\n          exceptionalWord,\n          replacement\n        };\n      }\n    }\n\n    return {\n      alternative\n    };\n  }\n\n  decideMatcher(exceptional, alternative) {\n    if (exceptional !== undefined) {\n      return exceptional.exceptionalWord;\n    }\n\n    if (alternative !== undefined) {\n      // Using RegExp in \"case-insensetive\" mode to match exceptional\n      // with its alternative casing\n      return new RegExp(escapeRegex(alternative.exceptionalWord), 'gi');\n    }\n  }\n\n  findCase(word, source) {\n    const {\n      exceptional,\n      alternative\n    } = this.findInCollection(word, source);\n    const matcher = this.decideMatcher(exceptional, alternative);\n    const replacement = exceptional?.replacement || alternative?.replacement;\n\n    if (matcher && replacement) {\n      return {\n        matcher,\n        replacement\n      };\n    }\n  }\n\n}","import { LATIN_CHARACTERS } from \"./characters.js\";\nimport { normalizeCase } from \"./utils.js\";\n\nfunction transliterateBigram(word, matcher, cyrillicBigram) {\n  return word.replace(matcher, matchString => {\n    return normalizeCase(cyrillicBigram, matchString[0]);\n  });\n}\n\nfunction transliterateApostrophe(word) {\n  const apostrophe = 'ъ';\n  return word.replace(/[ʻʼ’'`‘´]/g, (_, index) => {\n    // Prioritize assimilation to the next letter\n    const assimilator = word[index + 1] || word[index - 1];\n\n    if (assimilator) {\n      return normalizeCase(apostrophe, assimilator);\n    }\n\n    return apostrophe.toLowerCase();\n  });\n}\n\nfunction transliterateSpecialLetters(word) {\n  word = word.replace(/tsi(on|ya)/gi, matchString => {\n    return transliterateBigram(matchString, /ts/i, 'ц');\n  });\n  /* \n  Replace with 'Э' if:\n    1. word starts with 'E'\n    2. 'E' comes after non-letter symbol\n    3. cyrillic letter \n  */\n\n  word = word.replace(/^e|[\\W]e/gi, matchString => {\n    return transliterateBigram(matchString, /e/i, 'э');\n  });\n  word = word.replace(/e{2}/gi, matchString => {\n    return matchString[0] + normalizeCase('э', matchString[1]);\n  });\n  word = transliterateBigram(word, /ch/gi, 'ч');\n  word = transliterateBigram(word, /sh/gi, 'ш');\n  word = transliterateBigram(word, /g[ʻʼ’'`‘´]/gi, 'ғ');\n  word = transliterateBigram(word, /o[ʻʼ’'`‘´]/gi, 'ў');\n  word = transliterateBigram(word, /ye/gi, 'е');\n  word = transliterateBigram(word, /yo/gi, 'ё');\n  word = transliterateBigram(word, /yu/gi, 'ю');\n  word = transliterateBigram(word, /ya/gi, 'я'); // handle non-bigram \"S'H\" => \"СҲ\" combination\n\n  word = word.replace(/s[ʻʼ’'`‘´]h/gi, matchString => {\n    const s = LATIN_CHARACTERS[matchString[0]] || matchString[0];\n    const h = LATIN_CHARACTERS[matchString[2]] || matchString[2];\n    return s + h;\n  });\n  word = transliterateApostrophe(word);\n  return word;\n}\n\nexport function latinToCyrillic(word) {\n  const escapedWord = transliterateSpecialLetters(word);\n  let out = '';\n\n  for (const char of escapedWord) {\n    if (char in LATIN_CHARACTERS) {\n      out += LATIN_CHARACTERS[char];\n    } else {\n      out += char;\n    }\n  }\n\n  return out;\n}","import { cyrillicToLatin } from \"./cyrillic.js\";\nimport { ExceptionalsCollection } from \"./exceptionalsCollection.js\";\nimport { latinToCyrillic } from \"./latin.js\";\nimport { isRomanNumber, isURL } from \"./utils.js\";\nexport default class Transliterator {\n  exceptionalsCollection = new ExceptionalsCollection();\n\n  constructor(exceptions = []) {\n    this.extendExceptionals(exceptions);\n  }\n\n  extendExceptionals(exceptions) {\n    this.exceptionalsCollection.extend(exceptions);\n  }\n\n  purgeExceptionals() {\n    this.exceptionalsCollection.purge();\n  }\n\n  getTransliterator(source) {\n    return source === 'latin' ? latinToCyrillic : cyrillicToLatin;\n  }\n\n  replaceExceptionals(word, exceptional, replacement, transliterator) {\n    let chunks = word.split(exceptional);\n    chunks = chunks.map((chunk, i) => {\n      const isLastChunk = i === chunks.length - 1;\n      return transliterator(chunk) + (isLastChunk ? '' : replacement);\n    });\n    return chunks.join('');\n  }\n\n  handleExceptional(word, source) {\n    const exceptional = this.exceptionalsCollection.findCase(word, source);\n\n    if (exceptional) {\n      return this.replaceExceptionals(word, exceptional.matcher, exceptional.replacement, this.getTransliterator(source));\n    }\n  }\n\n  transliteratePureWord(word, source) {\n    const transliterator = this.getTransliterator(source);\n    return word.replace(/[ʻʼ’'`´‘a-z\\u0400-\\u04FF\\-]+/gi, pureWord => {\n      const exceptionalWord = this.handleExceptional(pureWord, source);\n\n      if (exceptionalWord) {\n        return exceptionalWord;\n      }\n\n      return transliterator(pureWord);\n    });\n  }\n\n  transliterateWord(word, source) {\n    if (isURL(word)) {\n      return word;\n    }\n\n    if (isRomanNumber(word)) {\n      return word;\n    }\n\n    const exceptionalWord = this.handleExceptional(word, source);\n\n    if (exceptionalWord) {\n      return exceptionalWord;\n    }\n\n    return this.transliteratePureWord(word, source);\n  }\n\n  toCyrillic(word) {\n    if (word instanceof Array) {\n      return word.map(w => this.transliterateWord(w, 'latin'));\n    } else if (typeof word === 'string') {\n      return this.transliterateWord(word, 'latin');\n    }\n  }\n\n  toLatin(word) {\n    if (word instanceof Array) {\n      return word.map(w => this.transliterateWord(w, 'cyrillic'));\n    } else if (typeof word === 'string') {\n      return this.transliterateWord(word, 'cyrillic');\n    }\n  }\n\n  textToCyrillic(text) {\n    return text.replace(/\\S+/g, word => this.transliterateWord(word, 'latin'));\n  }\n\n  textToLatin(text) {\n    return text.replace(/\\S+/g, word => this.transliterateWord(word, 'cyrillic'));\n  }\n\n}\nexport { cyrillicToLatin, latinToCyrillic };"],"names":["APOSTROPHE","TURNED_COMMA","LATIN_CHARACTERS","CYRILLIC_CHARACTERS","isLowerCase","char","toLowerCase","normalizeCase","assimilateTo","toUpperCase","capitalize","word","charAt","substring","isLetter","test","isURL","anchorme","list","length","escapeRegex","expString","replace","endsWithSoftSign","isRomanNumber","normalizeBigramCasing","matcher","latinBigram","matchString","index","assimilator","replaceSpecials","str","cyrillicToLatin","escapedWord","out","ExceptionalsCollection","constructor","exceptions","extend","forEach","pair","collection","push","generateWordCasingVariants","purge","latin","cyrillic","getCase","exceptionalPair","source","exceptionSource","exceptionTarget","exceptionalWord","replacement","normalizeEndSoftSign","exceptional","findInCollection","alternative","shouldDefaultToLowerCase","altCasingMatch","startsWith","decideMatcher","undefined","RegExp","findCase","transliterateBigram","cyrillicBigram","transliterateApostrophe","apostrophe","_","transliterateSpecialLetters","s","h","latinToCyrillic","Transliterator","extendExceptionals","exceptionalsCollection","purgeExceptionals","getTransliterator","replaceExceptionals","transliterator","chunks","split","map","chunk","i","isLastChunk","join","handleExceptional","transliteratePureWord","pureWord","transliterateWord","toCyrillic","Array","w","toLatin","textToCyrillic","text","textToLatin"],"mappings":"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"}